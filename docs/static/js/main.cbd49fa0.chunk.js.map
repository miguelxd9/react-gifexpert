{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GiftExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","imgs","setTimeout","useFetchGifs","class","role","GiftExpertApp","categories","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCkCCQ,EAtCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,sBAAMC,SAbW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAvBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,QCShBG,EAhBK,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAI7B,OAFAC,QAAQC,IAAIJ,EAAIC,EAAOC,GAInB,sBAAKG,UAAU,OAAf,UAEI,qBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,4BAAIA,Q,uBCXHO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbR,EAFa,0FAE6ES,UAAUF,GAFvF,sBAGIG,MAAMV,GAHV,cAGbW,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QAXvB,kBAgBZc,GAhBY,4CAAH,sDC0CLK,EArCC,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAEd,ECJwB,SAACA,GAEzB,MAA0BvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAlBAC,qBAAW,WACPjB,EAAQC,GACH/B,MAAM,SAAAgD,GAEHC,YAAY,WAERxB,QAAQC,IAAIsB,GACZF,EAAS,CACLT,KAAMW,EACNJ,SAAS,MAGd,UAGZ,CAACb,IAGGc,EDrBwBK,CAAanB,GAAhCU,EAAZ,EAAOJ,KAAaO,EAApB,EAAoBA,QAEpB,OACI,qCACI,6BAAMb,IAELa,GAAW,qBAAKO,MAAM,8BAA8BC,KAAK,SAA9C,SACI,sBAAMD,MAAM,kBAAZ,0BAIhB,qBAAKxB,UAAU,YAAf,SACI,6BAEQc,EAAOF,KAAK,SAAAC,GAAG,OAGX,cAAC,EAAD,eAEQA,GADGA,EAAIlB,eEQ5B+B,EA7BO,WAElB,MAAoC7C,mBAAS,CAAC,SAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAGA,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAiBA,IAE9B,uBAGA,6BAEQ+C,EAAWf,KAAK,SAACR,EAAUwB,GAAX,OACZ,cAAC,EAAD,CAEIxB,SAAYA,GADLA,YCfnCyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B/D,M","file":"static/js/main.cbd49fa0.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const inputHandleChange = (e) => {\r\n        \r\n        setInputValue(e.target.value);\r\n\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 0){\r\n            setCategories( cat => [inputValue, ...cat]);\r\n            setInputValue('');\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange = { inputHandleChange }\r\n            />\r\n        </form> \r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import React from 'react';\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n\r\n    console.log(id, title, url);\r\n\r\n    return (\r\n\r\n        <div className=\"card\">\r\n\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default GifGridItem;","export const getGifs = async (category) => {\r\n         \r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=xv61yVU9NoQrznm4ZKnKl770XOiZBOQu&q=${ encodeURI(category) }&limit=10`;\r\n    const response = await fetch(url);\r\n    const {data} = await response.json();\r\n\r\n    const gifs = data.map( img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\n//import React, {useState, useEffect} from 'react';\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({category}) => {\r\n   \r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n\r\n            {loading && <div class=\"spinner-border text-primary\" role=\"status\">\r\n                            <span class=\"visually-hidden\">Loading...</span>\r\n                        </div>}\r\n\r\n            {\r\n            <div className=\"card-grid\">            \r\n                <ol>\r\n                    {\r\n                        images.map( img => (\r\n\r\n\r\n                            <GifGridItem \r\n                                key = {img.id}\r\n                                {...img}\r\n                            />\r\n\r\n                        ))\r\n                    }\r\n                    \r\n                </ol>\r\n            </div>\r\n            }\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default GifGrid;","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n\r\n                setTimeout( () => {\r\n\r\n                    console.log(imgs);\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n\r\n                }, 3000)\r\n\r\n            })\r\n    }, [category])\r\n\r\n\r\n    return state \r\n\r\n}","import React, {useState} from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n\r\nconst GiftExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Goku']);\r\n\r\n\r\n    return (\r\n        <>  \r\n            <h2>GiftExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories}/>\r\n\r\n            <hr/>\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( (category, i) =>  (\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category = {category} \r\n                        /> \r\n                    ))\r\n                    \r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default GiftExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport GiftExpertApp from './components/GiftExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GiftExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}